<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://fgsec.net/</id><title>Fgsec</title><subtitle>This blog is my honest attempt to share knowledge with different people, and learn more in the process.</subtitle> <updated>2021-10-25T22:23:45-03:00</updated> <author> <name>Felipe Gaspar</name> <uri>https://fgsec.net/</uri> </author><link rel="self" type="application/atom+xml" href="https://fgsec.net/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://fgsec.net/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2021 Felipe Gaspar </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Dynamically resolving syscalls in C#</title><link href="https://fgsec.net/posts/Dynamically-resolving-syscalls-in-CSharp/" rel="alternate" type="text/html" title="Dynamically resolving syscalls in C#" /><published>2021-05-04T13:00:00-03:00</published> <updated>2021-10-25T22:23:22-03:00</updated> <id>https://fgsec.net/posts/Dynamically-resolving-syscalls-in-CSharp/</id> <content src="https://fgsec.net/posts/Dynamically-resolving-syscalls-in-CSharp/" /> <author> <name>Felipe Gaspar</name> </author> <summary> This post aims to describe and provide example code on how you can dynamically resolve syscalls using only C#. What are System calls? TL;DR: System calls or just syscalls are used by applications to perform tasks that are executed by the kernel, such as opening files, allocating memory, and so on. In the offensive context, you can use them to evade API hooks used by security products to inter... </summary> </entry> <entry><title>Injecting dotNet Assemblies to Unmanaged Processes</title><link href="https://fgsec.net/posts/Injecting-dotNet-Assemblies-To-Unmanaged-Processes/" rel="alternate" type="text/html" title="Injecting dotNet Assemblies to Unmanaged Processes" /><published>2021-02-09T13:00:00-03:00</published> <updated>2021-02-13T01:12:42-03:00</updated> <id>https://fgsec.net/posts/Injecting-dotNet-Assemblies-To-Unmanaged-Processes/</id> <content src="https://fgsec.net/posts/Injecting-dotNet-Assemblies-To-Unmanaged-Processes/" /> <author> <name>Felipe Gaspar</name> </author> <summary> This is a quick post to show how you can inject your .NET assembly code to unmanaged processes. Generate the ShellCode As an example, I will be using a Mythic implant. But feel free to develop your own payload. For this task we will use the Donut project, you can read more about it here. The syntax is very simple, we need to indicate our payload (-f), the Class preceded by the Namespace (-c... </summary> </entry> <entry><title>Bypass Upload Restrictions and Evade Detection</title><link href="https://fgsec.net/posts/Bypass-Upload-Restrictions-and-Evade-Detection/" rel="alternate" type="text/html" title="Bypass Upload Restrictions and Evade Detection" /><published>2021-01-22T13:00:00-03:00</published> <updated>2021-02-13T01:12:42-03:00</updated> <id>https://fgsec.net/posts/Bypass-Upload-Restrictions-and-Evade-Detection/</id> <content src="https://fgsec.net/posts/Bypass-Upload-Restrictions-and-Evade-Detection/" /> <author> <name>Felipe Gaspar</name> </author> <summary> Let’s be honest, bypassing upload restrictions is not something new and usually involves different methods to achieve the same goal: execute your 1337 code on your victim; But you can’t always do this without getting caught by the Blue Team. On this post I’ll be showing a combination of an old technique to bypass upload restriction on ASP/.NET applications and some ways to evade detection. St... </summary> </entry> <entry><title>From CSRF to RCE</title><link href="https://fgsec.net/posts/From-CSRF-to-RCE/" rel="alternate" type="text/html" title="From CSRF to RCE" /><published>2020-04-19T13:00:00-03:00</published> <updated>2021-02-13T00:55:40-03:00</updated> <id>https://fgsec.net/posts/From-CSRF-to-RCE/</id> <content src="https://fgsec.net/posts/From-CSRF-to-RCE/" /> <author> <name>Felipe Gaspar</name> </author> <summary> A few days ago I started taking interest in Bolt, a content management that quoting from its github, is a “Sophisticated, lightweight &amp;amp; simple CMS”. The team behind it really did a great job in making the CMS easy to use, and packed with a lot of features. I truly recommend you checking out their project if you are looking for a cool new CMS to use. Affected Version Bolt CMS 3.6.6 - It... </summary> </entry> <entry><title>New blog again</title><link href="https://fgsec.net/posts/New-Blog-Again/" rel="alternate" type="text/html" title="New blog again" /><published>2020-03-10T00:00:00-03:00</published> <updated>2021-02-13T00:46:46-03:00</updated> <id>https://fgsec.net/posts/New-Blog-Again/</id> <content src="https://fgsec.net/posts/New-Blog-Again/" /> <author> <name>Felipe Gaspar</name> </author> <summary> Ok, I’m not good at this blogging stuff but let me try it again. I hope to share new things I learn or just use this as a way to keep notes. </summary> </entry> </feed>
